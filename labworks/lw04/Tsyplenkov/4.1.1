#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>

int main()
{
    printf("Лабораторная работа №4 Задание 1.1\n\
Выполнил студент ИСТбд-21 Цыпленков Д. А.\n");
    int file_descriptors[2], fork_result, check_pipe;
    char res_string[16];
/*
Pipe (канал, труба) - область памяти, недоступная пользовательским
процессам. Нужна она для передачи информации между процессами, либо
внутри процесса.
Параметры: указатель на массив из двух целочисленных переменных *fd.
если процесс завершился нормально - fd[0] будет занесён
файловый дескриптор, соотв. входному потоку данных
(чтение)
fd[1] - выходной поток данных (запись)
Возвращаемые значения: 0 - если норм. завершение
      			      -1 - !норм. завершение
*/

    /* Создаём канал*/
    check_pipe = pipe(file_descriptors);
    /* Проверяем результат создания канала */
    if (check_pipe == -1) exit(1); // если -1 - выход

    /* Создаём новый процесс */
    fork_result = fork();

    if(fork_result==-1)
            exit(1);
            else if (fork_result==0)
            {
            // Если потомок
            read(file_descriptors[0], res_string, 16);
	    // Т.к. файловый дескриптор общий, нужно подождать
            write(file_descriptors[1], "Hi, I'm child!", 16);
            printf("Child get message - %s\n", res_string);
            } else
            {
            // Если родитель
            write(file_descriptors[1], "Hi, I'm parent!", 16);
            sleep(1);
            read(file_descriptors[0], res_string, 16);
            printf("Parent get message - %s\n", res_string);
            }

    // Закрываем каналы ввода и вывода
    close(file_descriptors[1]);
    close(file_descriptors[0]);
    return 0;
}
